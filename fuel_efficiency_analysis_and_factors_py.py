# -*- coding: utf-8 -*-
"""Fuel_Efficiency_Analysis_and_Factors.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOoXfAdGVnJnQMtei4gK6qxk-tmCjgTQ
"""

"""
Project Name : Fuel Efficiency Analysis for Car Buyers
Analyst : Mandela Philip Thomas
project Date : March 12, 2025

"""


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#load the dataset
url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv"
data_file = pd.read_csv(url)


#data cleaning and preprocessing
# Data Cleaning (example: dropping rows with missing values)
print(data_file.isnull().sum())
data_file.dropna(inplace=True)
data_file.drop_duplicates(inplace=True)
data_file.fillna(1)

#Exploratory Data Analysis (EDA)

#Visualize the distribution of MPG using histograms, Scottplot,  and box plots.
sns.histplot(data_file['mpg'], kde=True)
plt.title('Distribution of MPG')
plt.xlabel('MPG')
plt.ylabel('Frequency')

sns.scatterplot(x='weight', y='mpg', data=data_file)
plt.title('Weight vs MPG')
plt.xlabel('Weight')
plt.ylabel('MPG')

sns.boxplot(x='origin', y='mpg', data=data_file)
plt.title('MPG by Origin')
plt.xlabel('Origin')
plt.ylabel('MPG')

#Create a correlation matrix to see the corelation between the numerical data.
gdf = data_file.groupby('origin') [['cylinders', 'mpg', 'model_year']]
gdf.corr()
gdf.corr().unstack()

sns.heatmap(gdf.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

#Origin-Based Comparison
origin_means = data_file.groupby('origin')['mpg'].mean()
origin_means.plot(kind='bar')
plt.title('Average MPG by Origin')
plt.xlabel('Origin')
plt.ylabel('Average MPG')
plt.show()

#scatter plots to explore the relationship between MPG and other numerical variables (cylinders, displacement, horsepower, weight, acceleration)
sns.scatterplot(data_file[['mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']])
plt.suptitle('Pairwise Relationships')
plt.xlabel('Numerical Variables')
plt.ylabel('Numerical Variables')
plt.show()

#box plots to compare MPG across different categories (cylinders, origin, model_year)

gddf = data_file.groupby('cylinders') [['mpg', 'origin', 'model_year']]
gddf.boxplot()
plt.title('MPG by Cylinders')
plt.xlabel('Cylinders')
plt.ylabel('MPG')
plt.show()

gddf = data_file.groupby('origin') [['mpg', 'cylinders', 'model_year']]
gddf.boxplot()
plt.title('MPG by Origin')
plt.xlabel('Origin')
plt.ylabel('MPG')
plt.show()

gddf = data_file.groupby('model_year') [['mpg', 'cylinders', 'origin']]
gddf.boxplot()
plt.title('MPG by Model Year')
plt.xlabel('Model Year')
plt.ylabel('MPG')
plt.show()

#Model Year Trends
model_year_means = data_file.groupby('model_year')['mpg'].mean()
model_year_means.plot(kind='line')
plt.title('Average MPG by Model Year')
plt.xlabel('Model Year')
plt.ylabel('Average MPG')
plt.show()

#Cylinder count vs performance
cylinder_means = data_file.groupby('cylinders')['mpg'].mean()
cylinder_means.plot(kind='bar')
plt.title('Average MPG by Cylinder Count')
plt.xlabel('Cylinder Count')
plt.ylabel('Average MPG')
plt.show()